### Connector config ###
kafka {
  topic = test

  producer.type = async

  key.serializer = org.apache.kafka.common.serialization.StringSerializer
  value.serializer = org.apache.kafka.common.serialization.StringSerializer

  bootstrap.servers = "10.200.0.243:9093"

  security.protocol = SSL
  ssl.truststore.location = /home/dspiritu/kafkaConfig/config/server_kafka/kafka-server-trustore.jks
  ssl.truststore.password = stratio

  ssl.keystore.location = /home/dspiritu/kafkaConfig/config/client_kafka/client_kafka.jks
  ssl.keystore.password = stratio
  ssl.key.password = stratio

}


### Default Policy: Could be "Allow" or "Deny"
authorizer {
  default.policy = "Deny"
  resource.type = "file"
}

plugin.version = 0.5.0
plugin.instance = DummyInstance

### Zk config ###

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
zookeeper {
  connect = "gosec06.dev.stratio.com:2181"
  connection.timeout.ms = 6000
  session.timeout.ms = 6000
  root.path = "/stratio/gosec"
  sasl.client = "true"
}

java.security.auth.login.config = "/opt/zookeeper-3.5.2-alpha/conf/jaas.conf"


management.principal = "management@DEMO.STRATIO.COM"
sso.principal = "sso@DEMO.STRATIO.COM"

ldap {
  host = "idp.integration.labs.stratio.com"
  port = 636
  principal = "cn=ldaproot,dc=stratio,dc=com"
  authetication = "simple"
  credentials = "stratio_changeme"
  userDomain = "ou=People,dc=stratio,dc=com"
  groupDomain = "ou=Groups,dc=stratio,dc=com"
  secured = "true"

  mapping {
    # Mappings: In entity needs to specify which fields of LDAP map to proper fields
    # Example:  User(id,name) corresponds on LDAP: uid, cn
    user.id = "uid"
    user.name = "cn"
    user.description = "description"
    user.mail = "mail"
    group.id = "cn"
    group.name = "description"
    group.member = "memberUid"
  }
  matching {
    #  group.linkUser = "uid=%filter,ou=People,dc=stratio,dc=com"
    group.linkUser = "uid=%filter"
  }
  queries {
    # The system expect a query with literal '%filter' if needs params or filters.
    # It will be replaced with proper fields
    user.queryAll = "(&(objectClass=person))"
    group.queryAll = "(&(objectClass=posixGroup))"
    # Query for search groups by user.
    group.groupByUser = "(&(objectClass=posixGroup)(memberUid=uid=%filter,ou=People,dc=stratio,dc=com))"
  }
}
